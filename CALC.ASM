
  CR    EQU    13
  LF    EQU    10

CODE_SEG    SEGMENT
  ASSUME    CS:CODE_SEG
  ORG       100h

EXTRN INPUT_NUM:NEAR
EXTRN REG_OUT:NEAR
EXTRN COMP_NUM:NEAR

CALC   PROC NEAR 
RESTART:  
  MOV BX, 1 ;FIRST NUMBER

BEGIN:  
  MOV SI, 4 ;MAX DIGITS IS NOW 4
  XOR CX, CX
  CALL INPUT_FIRST    ;INPUT FIRST NUMBER
PRINT_SAVE:  
  MOV DL, AL
  MOV AL, AH          ;SAVE NUMBER IN STACK
  XOR AH, AH
  PUSH AX 
  CALL WRITE_CAR      ;WRITE NUMBER
  
  INC CX              ;INCREASE NUMBER COUNTER
  CMP CX, SI          ;NUMBER COUNTER IS MAX?
  JZ MAX_DIGITS       ;IF YES THEN GOTO OPERATION INPUT
  
  
REPEAT_INPUT:  
  CALL INPUT_NUM      ;IF NO THEN INPUT NEXT NUMBER
  CMP AH, 10          ;IF 0-9 
  JS  PRINT_SAVE      ;GOTO SAVE NUMBER

  CMP AH, 10          ;IS + PRESSED?
  JZ CHECK_PLUS       ;YES THEN GOTO CHECK_PLUS

  CMP AH, 14          ;CHECK IF ENTER
  JZ CHECK_ENTER      ;YES THEN GOTO CHECK_ENTER
  JMP REPEAT_INPUT

MAX_DIGITS:
  CMP BX, 1
  JZ INPUT_OPERATION
  CMP BX, 2
  JZ INPUT_ENTER


CHECK_PLUS:
  CMP BX, 1           ;PLUS IS VALID IF BX=1
  JNZ REPEAT_INPUT    ;IF NOT THEN GOTO INPUT
  
VALID_PLUS_PRESSED:  
  CALL COMP_NUM       ;COMPILE NUMBER FROM STACK
  PUSH AX             ;SAVE COMPILED NUMBER TO STACK
  CALL PRINT_ENDL
  MOV  DL, 43         ;PRINT "+"
  CALL WRITE_CAR
  CALL PRINT_ENDL
  MOV BX, 2           ;INCREMENT BX TO INDICATE SECOND NUMBER
  JMP BEGIN           ;JUMP TO BEGIN TO INPUT SECOND NUMBER

CHECK_ENTER:
  CMP BX, 2           ;ENTER IS VALID IF BX=2
  JNZ REPEAT_INPUT    ;IF NOT THEN GOTO INPUT
  
VALID_ENTER_PRESSED:  
  CALL COMP_NUM       ;COMPILE NUMBER FROM STACK
  PUSH AX             ;SAVE COMPILED NUMBER TO STACK
  CALL PRINT_ENDL
  MOV  DL, 61         ;PRINT "="
  CALL WRITE_CAR
  CALL PRINT_ENDL
  POP BX
  POP AX
  ADD AX, BX
  CALL REG_OUT
  CALL PRINT_ENDL
  INT 20h

INPUT_OPERATION:
  CALL INPUT_NUM
  CMP AH, 10 
  JNZ INPUT_OPERATION
  JMP VALID_PLUS_PRESSED

INPUT_ENTER:
  CALL INPUT_NUM
  CMP AH, 14 
  JNZ INPUT_ENTER
  JMP VALID_ENTER_PRESSED
 
  CALC   ENDP

WRITE_CAR   PROC NEAR
  MOV       AH,2

  INT       21h
  RET
WRITE_CAR   ENDP

INPUT_FIRST PROC NEAR
REP1:  
  CALL INPUT_NUM
  CMP AH, 10
  JNS REP1
  RET

INPUT_FIRST ENDP

PRINT_ENDL PROC NEAR
  PUSH DX
  MOV DL, CR
  CALL WRITE_CAR
  MOV DL, LF
  CALL WRITE_CAR
  POP DX
  RET
PRINT_ENDL ENDP


CODE_SEG    ENDS
 END        CALC



